// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Pokedex;
//
//    var pokedexEntry = PokedexEntry.FromJson(jsonString);

namespace Pokedex
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    [Table("PokedexEntry")]
    public partial class PokedexEntry
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }
        [Required]
        public Guid BatchID { get; set; }

        [JsonProperty("pokedexEntryNumber", NullValueHandling = NullValueHandling.Ignore)]
        public long PokedexEntryNumber { get; set; }

        [JsonProperty("timesEncountered", NullValueHandling = NullValueHandling.Ignore)]
        public long? TimesEncountered { get; set; }

        [JsonProperty("timesCaptured", NullValueHandling = NullValueHandling.Ignore)]
        public long? TimesCaptured { get; set; }

        [JsonProperty("capturedForms", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> CapturedForms { get; set; }

        [JsonProperty("capturedGenders", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> CapturedGenders { get; set; }

        [JsonProperty("capturedShiny", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CapturedShiny { get; set; }

        [JsonProperty("encounteredGenders", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> EncounteredGenders { get; set; }

        [JsonProperty("encounteredShiny", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EncounteredShiny { get; set; }

        [JsonProperty("capturedShinyForms", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> CapturedShinyForms { get; set; }

        [JsonProperty("pokedexCategoryStatus", NullValueHandling = NullValueHandling.Ignore)]
        public PokedexCategoryStatus PokedexCategoryStatus { get; set; }

        [JsonProperty("obAlignment", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> ObAlignment { get; set; }
    }

    public partial class PokedexCategoryStatus
    {
        [JsonProperty("THREE_STAR", NullValueHandling = NullValueHandling.Ignore)]
        public Shiny ThreeStar { get; set; }

        [JsonProperty("SHINY", NullValueHandling = NullValueHandling.Ignore)]
        public Shiny Shiny { get; set; }
    }

    public partial class Shiny
    {
        [JsonProperty("pokedexCategory", NullValueHandling = NullValueHandling.Ignore)]
        public string PokedexCategory { get; set; }

        [JsonProperty("encountered", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Encountered { get; set; }

        [JsonProperty("acquired", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Acquired { get; set; }
    }

    public partial class PokedexEntry
    {
        public static PokedexEntry FromJson(string json) => JsonConvert.DeserializeObject<PokedexEntry>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this PokedexEntry self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
